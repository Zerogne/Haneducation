import { NextResponse } from "next/server"
import { connectToDatabase } from "@/lib/mongoose"
import Team from "@/models/team"
import Content from "@/models/content"
import User from "@/models/user"
import bcrypt from "bcryptjs"

export const dynamic = 'force-dynamic'

export async function POST() {
  try {
    await connectToDatabase()

    // Initialize admin user with optimized storage
    const existingAdmin = await User.findOne({ username: "admin" })
    if (!existingAdmin) {
      const hashedPassword = await bcrypt.hash("HanEducation123@", 12)
      const adminUser = new User({
        username: "admin",
        password: hashedPassword,
        name: "Administrator",
        email: "admin@han-education.com",
        role: "admin"
      })
      await adminUser.save()
      console.log("Admin user created successfully")
    }

    // Initialize team members with minimal data
    const existingTeam = await Team.find({})
    if (existingTeam.length === 0) {
      const teamMembers = [
        {
          name: "Wang Yue",
          role: "–ì–∞–¥–∞–∞–¥ —Ö–∞—Ä–∏–ª—Ü–∞–∞, –±–∏—á–∏–≥ –±–∞—Ä–∏–º—Ç —Ö–∞—Ä–∏—É—Ü—Å–∞–Ω –º—ç—Ä–≥—ç–∂–∏–ª—Ç—ç–Ω",
          image: "/teamMember1.png", // Using local file to save MongoDB space
          email: "wangyue@haneducation.mn",
          phone: "+976 7777 7780",
          linkedin: "linkedin.com/in/wangyue",
          badge: "Nanjing University 2020",
          department: "admissions",
          // Minimal metadata to save space
          metadata: {
            education: "Nanjing University 2020"
          }
        },
        {
          name: "–ë.–ú”©–Ω—Ö–∑—É–ª",
          role: "–ï—Ä”©–Ω—Ö–∏–π –∑–∞—Ö–∏—Ä–∞–ª",
          image: "/placeholder.svg?height=200&width=200&text=–ë–ú",
          email: "monkhzul@haneducation.mn",
          phone: "+976 7777 7777",
          linkedin: "linkedin.com/in/monkhzul",
          badge: "–¢—ç—Ä–≥“Ø“Ø–Ω",
          department: "management",
          metadata: {
            education: "Mongolian National University"
          }
        },
        {
          name: "”®.–ú”©–Ω–≥”©–Ω–∑—É–ª",
          role: "–•”©–≥–∂“Ø“Ø–ª—ç–ª—Ç–∏–π–Ω –∑–∞—Ö–∏—Ä–∞–ª",
          image: "/placeholder.svg?height=200&width=200&text=”®–ú",
          email: "mungunzul@haneducation.mn",
          phone: "+976 7777 7778",
          linkedin: "linkedin.com/in/mungunzul",
          badge: "–ú—ç—Ä–≥—ç–∂–∏–ª—Ç—ç–Ω",
          department: "development",
          metadata: {
            education: "Mongolian University of Science and Technology"
          }
        }
      ]

      for (const member of teamMembers) {
        const newMember = new Team(member)
        await newMember.save()
      }

      console.log("Team members initialized successfully")
    }

    // Initialize content with optimized structure
    const existingContent = await Content.find({ section: "why-china" })
    if (existingContent.length === 0) {
      const whyChinaContent = {
        section: "why-china",
        title: "–•—è—Ç–∞–¥ —É–ª—Å–∞–¥ —Å—É—Ä–∞–ª—Ü–∞—Ö—ã–Ω 6 —Ç–æ–º–æ–æ—Ö–æ–Ω –¥–∞–≤—É—É —Ç–∞–ª",
        description: "–•—è—Ç–∞–¥ —É–ª—Å–∞–¥ —Å—É—Ä–∞–ª—Ü–∞—Ö –Ω—å —Ç–∞–Ω–¥ –æ–ª–æ–Ω –¥–∞–≤—É—É —Ç–∞–ª, –±–æ–ª–æ–º–∂—É—É–¥—ã–≥ ”©–≥–¥”©–≥.",
        // Compressed content structure to save space
        content: JSON.stringify([
          {
            t: "–î—ç–ª—Ö–∏–π–Ω —Ö—ç–º–∂—ç—ç–Ω–¥ —Ö“Ø–ª—ç—ç–Ω –∑”©–≤—à”©”©—Ä”©–≥–¥—Å”©–Ω –±–æ–ª–æ–≤—Å—Ä–æ–ª—ã–Ω —Ç–æ–≥—Ç–æ–ª—Ü–æ–æ",
            d: "Tsinghua University, Peking University –∑—ç—Ä—ç–≥ –Ω—å QS World University Rankings-—Ç –∂–∏–ª –±“Ø—Ä –¥—ç—ç–≥“Ø“Ø—Ä –±–∏—á–∏–≥–¥–¥—ç–≥.",
            c: "blue"
          },
          {
            t: "–¢—ç—Ç–≥—ç–ª—ç–≥ –±–æ–ª–æ–Ω —Ö”©–Ω–≥”©–ª”©–ª—Ç–∏–π–Ω ”©—Ä–≥”©–Ω –±–æ–ª–æ–º–∂",
            d: "–•—è—Ç–∞–¥—ã–Ω –∑–∞—Å–≥–∏–π–Ω –≥–∞–∑–∞—Ä –±–æ–ª–æ–Ω —Å—É—Ä–≥—É—É–ª–∏—É–¥ –Ω—å –≥–∞–¥–∞–∞–¥ –æ—é—É—Ç–Ω—É—É–¥–∞–¥ –∑–æ—Ä–∏—É–ª—Å–∞–Ω 100% –±–æ–ª–æ–Ω —Ö—ç—Å—ç–≥—á–∏–ª—Å—ç–Ω —Ç—ç—Ç–≥—ç–ª—ç–≥ –æ–ª–≥–æ–¥–æ–≥.",
            c: "green"
          },
          {
            t: "–•—è—Ç–∞–¥ —Ö—ç–ª —Å—É—Ä–∞—Ö –¥–∞–≤—É—É —Ç–∞–ª",
            d: "–•—è—Ç–∞–¥ —Ö—ç–ª –±–æ–ª –¥—ç–ª—Ö–∏–π –¥—ç—ç—Ä—Ö —Ö–∞–º–≥–∏–π–Ω –æ–ª–æ–Ω —Ö“Ø–Ω —è—Ä—å–¥–∞–≥ —Ö—ç–ª. –ê–∂–∏–ª —ç—Ä—Ö–ª—ç—Ö –±–æ–ª–æ–º–∂ ”©—Ä–≥”©–∂–Ω”©.",
            c: "red"
          },
          {
            t: "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏, –∏–Ω–Ω–æ–≤–∞—Ü–∏–π–Ω —Ç”©–≤",
            d: "–•—è—Ç–∞–¥ —É–ª—Å –Ω—å —Ö–∏–π–º—ç–ª –æ—é—É–Ω —É—Ö–∞–∞–Ω, 5G, —Ü–∞—Ö–∏–º —Ö—É–¥–∞–ª–¥–∞–∞, —Ä–æ–±–æ—Ç —Ç–µ—Ö–Ω–∏–∫ –∑—ç—Ä—ç–≥ —Å–∞–ª–±–∞—Ä—Ç –¥—ç–ª—Ö–∏–π–¥ —Ç—ç—Ä–≥“Ø“Ø–ª–∂ –±–∞–π–Ω–∞.",
            c: "purple"
          },
          {
            t: "–°–æ—ë–ª—ã–Ω –æ–ª–æ–Ω —Ç–∞–ª—Ç –±–∞–π–¥–∞–ª, —à–∏–Ω—ç —Ç—É—Ä—à–ª–∞–≥–∞",
            d: "–•—è—Ç–∞–¥–∞–¥ —Å—É—Ä–∞–ª—Ü–∞—Ö –Ω—å –¥—ç–ª—Ö–∏–π–Ω —Ö–∞–º–≥–∏–π–Ω —ç—Ä—Ç–Ω–∏–π —Å–æ—ë–ª –∏—Ä–≥—ç–Ω—à–ª–∏–π–≥ —Å—É–¥–ª–∞—Ö, —à–∏–Ω—ç –æ—Ä—á–∏–Ω–¥ –±–∏–µ –¥–∞–∞—Ö –±–æ–ª–æ–º–∂.",
            c: "orange"
          },
          {
            t: "–ú–æ–Ω–≥–æ–ª—á—É—É–¥—ã–Ω —Ö—É–≤—å–¥ –≥–∞–∑–∞—Ä –∑“Ø–π–Ω –æ–π—Ä –±–∞–π—Ä—à–∏–ª",
            d: "–ì—ç—Ä –±“Ø–ª—Ç—ç–π–≥—ç—ç –æ–π—Ä –±–∞–π—Ö, –æ–Ω–≥–æ—Ü–Ω—ã —Ç–∏–π–∑, –∑–æ—Ä—á–∏—Ö –∑–∞—Ä–¥–∞–ª —Ö–∞—Ä—å—Ü–∞–Ω–≥—É–π –±–∞–≥–∞.",
            c: "indigo"
          }
        ]),
        order: 1,
        isActive: true,
        metadata: {
          badge: "üá®üá≥ –•—è—Ç–∞–¥–∞–¥ —Å—É—Ä–∞–ª—Ü–∞—Ö—ã–Ω —à–∞–ª—Ç–≥–∞–∞–Ω—É—É–¥"
        }
      }

      const newContent = new Content(whyChinaContent)
      await newContent.save()

      console.log("Why China content initialized successfully")
    }

    // Get storage statistics
    const teamCount = await Team.countDocuments()
    const contentCount = await Content.countDocuments()
    const userCount = await User.countDocuments()

    return NextResponse.json({ 
      success: true,
      message: "Data initialized successfully with storage optimization",
      stats: {
        teamMembers: teamCount,
        contentSections: contentCount,
        users: userCount
      },
      optimization: {
        storageStrategy: "MongoDB for essential data only",
        fileStorage: "Cloudinary for images and files",
        dataCompression: "Minimal metadata, compressed content structure"
      }
    })
  } catch (error) {
    console.error("Error initializing data:", error)
    return NextResponse.json(
      { success: false, error: "Failed to initialize data" }, 
      { status: 500 }
    )
  }
} 