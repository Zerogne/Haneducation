"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { motion } from "framer-motion"
import { useLanguage } from "@/contexts/language-context"
import { Award, GraduationCap, Languages, Cpu, Users, MapPin } from "lucide-react"

interface WhyChinaContent {
  _id: string
  section: string
  title: string
  description: string
  content: string
  metadata?: {
    badge?: string
  }
}

interface ContentItem {
  t: string // title
  d: string // description
  c: string // color
  icon?: string // icon name (optional)
}

const iconMap = {
  Award: Award,
  GraduationCap: GraduationCap,
  Languages: Languages,
  Cpu: Cpu,
  Users: Users,
  MapPin: MapPin,
}

const colorMap = {
  blue: "text-blue-600",
  green: "text-green-600", 
  red: "text-red-600",
  purple: "text-purple-600",
  orange: "text-orange-600",
  indigo: "text-indigo-600",
}

// Default content that will always be available
const defaultContent: WhyChinaContent = {
  _id: "default",
  section: "why-china",
  title: "–•—è—Ç–∞–¥ —É–ª—Å–∞–¥ —Å—É—Ä–∞–ª—Ü–∞—Ö—ã–Ω 6 —Ç–æ–º–æ–æ—Ö–æ–Ω –¥–∞–≤—É—É —Ç–∞–ª",
  description: "–•—è—Ç–∞–¥ —É–ª—Å–∞–¥ —Å—É—Ä–∞–ª—Ü–∞—Ö –Ω—å —Ç–∞–Ω–¥ –æ–ª–æ–Ω –¥–∞–≤—É—É —Ç–∞–ª, –±–æ–ª–æ–º–∂—É—É–¥—ã–≥ ”©–≥–¥”©–≥.",
  content: JSON.stringify([
    {
      t: "–î—ç–ª—Ö–∏–π–Ω —Ö—ç–º–∂—ç—ç–Ω–¥ —Ö“Ø–ª—ç—ç–Ω –∑”©–≤—à”©”©—Ä”©–≥–¥—Å”©–Ω –±–æ–ª–æ–≤—Å—Ä–æ–ª—ã–Ω —Ç–æ–≥—Ç–æ–ª—Ü–æ–æ",
      d: "Tsinghua University, Peking University –∑—ç—Ä—ç–≥ –Ω—å QS World University Rankings-—Ç –∂–∏–ª –±“Ø—Ä –¥—ç—ç–≥“Ø“Ø—Ä –±–∏—á–∏–≥–¥–¥—ç–≥.",
      c: "blue",
      icon: "Award"
    },
    {
      t: "–¢—ç—Ç–≥—ç–ª—ç–≥ –±–æ–ª–æ–Ω —Ö”©–Ω–≥”©–ª”©–ª—Ç–∏–π–Ω ”©—Ä–≥”©–Ω –±–æ–ª–æ–º–∂",
      d: "–•—è—Ç–∞–¥—ã–Ω –∑–∞—Å–≥–∏–π–Ω –≥–∞–∑–∞—Ä –±–æ–ª–æ–Ω —Å—É—Ä–≥—É—É–ª–∏—É–¥ –Ω—å –≥–∞–¥–∞–∞–¥ –æ—é—É—Ç–Ω—É—É–¥–∞–¥ –∑–æ—Ä–∏—É–ª—Å–∞–Ω 100% –±–æ–ª–æ–Ω —Ö—ç—Å—ç–≥—á–∏–ª—Å—ç–Ω —Ç—ç—Ç–≥—ç–ª—ç–≥ –æ–ª–≥–æ–¥–æ–≥.",
      c: "green",
      icon: "GraduationCap"
    },
    {
      t: "–•—è—Ç–∞–¥ —Ö—ç–ª —Å—É—Ä–∞—Ö –¥–∞–≤—É—É —Ç–∞–ª",
      d: "–•—è—Ç–∞–¥ —Ö—ç–ª –±–æ–ª –¥—ç–ª—Ö–∏–π –¥—ç—ç—Ä—Ö —Ö–∞–º–≥–∏–π–Ω –æ–ª–æ–Ω —Ö“Ø–Ω —è—Ä—å–¥–∞–≥ —Ö—ç–ª. –ê–∂–∏–ª —ç—Ä—Ö–ª—ç—Ö –±–æ–ª–æ–º–∂ ”©—Ä–≥”©–∂–Ω”©.",
      c: "red",
      icon: "Languages"
    },
    {
      t: "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏, –∏–Ω–Ω–æ–≤–∞—Ü–∏–π–Ω —Ç”©–≤",
      d: "–•—è—Ç–∞–¥ —É–ª—Å –Ω—å —Ö–∏–π–º—ç–ª –æ—é—É–Ω —É—Ö–∞–∞–Ω, 5G, —Ü–∞—Ö–∏–º —Ö—É–¥–∞–ª–¥–∞–∞, —Ä–æ–±–æ—Ç —Ç–µ—Ö–Ω–∏–∫ –∑—ç—Ä—ç–≥ —Å–∞–ª–±–∞—Ä—Ç –¥—ç–ª—Ö–∏–π–¥ —Ç—ç—Ä–≥“Ø“Ø–ª–∂ –±–∞–π–Ω–∞.",
      c: "purple",
      icon: "Cpu"
    },
    {
      t: "–°–æ—ë–ª—ã–Ω –æ–ª–æ–Ω —Ç–∞–ª—Ç –±–∞–π–¥–∞–ª, —à–∏–Ω—ç —Ç—É—Ä—à–ª–∞–≥–∞",
      d: "–•—è—Ç–∞–¥–∞–¥ —Å—É—Ä–∞–ª—Ü–∞—Ö –Ω—å –¥—ç–ª—Ö–∏–π–Ω —Ö–∞–º–≥–∏–π–Ω —ç—Ä—Ç–Ω–∏–π —Å–æ—ë–ª –∏—Ä–≥—ç–Ω—à–ª–∏–π–≥ —Å—É–¥–ª–∞—Ö, —à–∏–Ω—ç –æ—Ä—á–∏–Ω–¥ –±–∏–µ –¥–∞–∞—Ö –±–æ–ª–æ–º–∂.",
      c: "orange",
      icon: "Users"
    },
    {
      t: "–ú–æ–Ω–≥–æ–ª—á—É—É–¥—ã–Ω —Ö—É–≤—å–¥ –≥–∞–∑–∞—Ä –∑“Ø–π–Ω –æ–π—Ä –±–∞–π—Ä—à–∏–ª",
      d: "–ì—ç—Ä –±“Ø–ª—Ç—ç–π–≥—ç—ç –æ–π—Ä –±–∞–π—Ö, –æ–Ω–≥–æ—Ü–Ω—ã —Ç–∏–π–∑, –∑–æ—Ä—á–∏—Ö –∑–∞—Ä–¥–∞–ª —Ö–∞—Ä—å—Ü–∞–Ω–≥—É–π –±–∞–≥–∞.",
      c: "indigo",
      icon: "MapPin"
    }
  ]),
  metadata: {
    badge: "üá®üá≥ –•—è—Ç–∞–¥–∞–¥ —Å—É—Ä–∞–ª—Ü–∞—Ö—ã–Ω —à–∞–ª—Ç–≥–∞–∞–Ω—É—É–¥"
  }
}

export function WhyChina() {
  const { t } = useLanguage()
  const [content, setContent] = useState<WhyChinaContent>(defaultContent)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState("")

  useEffect(() => {
    fetchWhyChinaContent()
  }, [])

  const fetchWhyChinaContent = async () => {
    try {
      setLoading(true)
      setError("")
      
      const response = await fetch('/api/content?section=why-china')
      if (response.ok) {
        const data = await response.json()
        if (data.success && data.content && data.content.length > 0) {
          setContent(data.content[0])
        } else {
          // Use default content if no data found in database
          console.log("No content found in database, using default content")
          setContent(defaultContent)
        }
      } else {
        // Use default content if API call fails
        console.log("API call failed, using default content")
        setContent(defaultContent)
      }
    } catch (error) {
      console.error("Error fetching Why China content:", error)
      // Use default content if there's any error
      setContent(defaultContent)
    } finally {
      setLoading(false)
    }
  }

  if (loading) {
    return (
      <section id="why-china" className="py-20 bg-background w-full">
        <div className="max-w-7xl mx-auto px-8 lg:px-16">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
            <p className="text-muted-foreground">Loading content...</p>
          </div>
        </div>
      </section>
    )
  }

  let contentItems: ContentItem[]
  try {
    contentItems = JSON.parse(content.content)
  } catch (error) {
    console.error("Error parsing content:", error)
    contentItems = JSON.parse(defaultContent.content)
  }

  return (
    <section id="why-china" className="py-20 bg-background w-full">
      <div className="max-w-7xl mx-auto px-8 lg:px-16">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
          viewport={{ once: true }}
          className="text-center mb-16"
        >
          <Badge variant="secondary" className="mb-4">
            {content.metadata?.badge || t("WhyChinaBadge") || "üá®üá≥ –•—è—Ç–∞–¥–∞–¥ —Å—É—Ä–∞–ª—Ü–∞—Ö—ã–Ω —à–∞–ª—Ç–≥–∞–∞–Ω—É—É–¥"}
          </Badge>
          <h2 className="text-3xl md:text-4xl font-bold mb-6">
            {content.title || t("WhyChinaTitle") || "–•—è—Ç–∞–¥ —É–ª—Å–∞–¥ —Å—É—Ä–∞–ª—Ü–∞—Ö—ã–Ω 6 —Ç–æ–º–æ–æ—Ö–æ–Ω –¥–∞–≤—É—É —Ç–∞–ª"}
          </h2>
          <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
            {content.description || t("WhyChinaDescription") || "–•—è—Ç–∞–¥ —É–ª—Å–∞–¥ —Å—É—Ä–∞–ª—Ü–∞—Ö –Ω—å —Ç–∞–Ω–¥ –æ–ª–æ–Ω –¥–∞–≤—É—É —Ç–∞–ª, –±–æ–ª–æ–º–∂—É—É–¥—ã–≥ ”©–≥–¥”©–≥."}
          </p>
        </motion.div>

        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          {contentItems.map((item, index) => {
            const IconComponent = iconMap[item.icon as keyof typeof iconMap] || Award
            const colorClass = colorMap[item.c as keyof typeof colorMap] || "text-blue-600"
            
            return (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: index * 0.1 }}
                viewport={{ once: true }}
              >
                <Card className="h-full group cursor-pointer hover:shadow-lg transition-all duration-300 ease-out hover:-translate-y-1 border hover:border-primary/20">
                  <CardHeader className="pb-4">
                    <div className={`w-12 h-12 rounded-lg flex items-center justify-center mb-6 transition-colors duration-300 ease-out bg-primary/10 group-hover:bg-primary/20 ${colorClass}`}>
                      <IconComponent className="h-6 w-6" />
                    </div>
                    <CardTitle className="text-xl mb-4 group-hover:text-primary transition-colors duration-300 ease-out">
                      {item.t}
                    </CardTitle>
                    <CardDescription className="group-hover:text-foreground transition-colors duration-300 ease-out leading-relaxed">
                      {item.d}
                    </CardDescription>
                  </CardHeader>
                </Card>
              </motion.div>
            )
          })}
        </div>
      </div>
    </section>
  )
} 